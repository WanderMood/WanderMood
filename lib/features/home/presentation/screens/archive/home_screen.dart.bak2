import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/rendering.dart';
import 'dart:ui';  // Add this import for ImageFilter
import 'dart:math' as math; // Add for random elements
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:wandermood/features/auth/domain/providers/auth_provider.dart';
import 'package:wandermood/features/profile/presentation/screens/profile_screen.dart';
import 'package:wandermood/features/explore/presentation/widgets/mood_selection_widget.dart';
import '../widgets/compact_weather_widget.dart';
import '../widgets/interactive_weather_widget.dart';
import '../widgets/mood_tile.dart';
import 'package:wandermood/features/weather/presentation/widgets/hourly_weather_widget.dart';
import 'explore_screen.dart';
import 'agenda_screen.dart';
import 'package:go_router/go_router.dart';
import 'package:wandermood/features/location/presentation/widgets/location_dropdown.dart';
import 'trending_screen.dart';
import 'package:wandermood/core/presentation/widgets/swirl_background.dart';
import 'package:wandermood/features/mood/presentation/widgets/mood_selector.dart';
import 'package:wandermood/core/domain/providers/location_notifier_provider.dart';
import 'package:wandermood/features/auth/providers/user_provider.dart';
import 'package:wandermood/features/weather/providers/weather_provider.dart';
import 'package:wandermood/features/home/presentation/widgets/moody_character.dart';

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

// Define time of day enum
enum TimeOfDay {
  morning,
  afternoon,
  evening,
}

class _HomeScreenState extends ConsumerState<HomeScreen> with SingleTickerProviderStateMixin {
  bool _showMoodSelector = false;
  bool _isMoodSelectorVisible = false;
  String _greeting = '';
  String _timeGreeting = '';
  late AnimationController _animationController;
  MoodyFeature _currentMoodyFeature = MoodyFeature.none;
  final List<String> _funGreetings = [
    "What's cookin', good lookin'?",
    "Hey there, superstar!",
    "Well hello, adventurer!",
    "Howdy, partner!",
    "Greetings, explorer!",
  ];
  
  // Add more contextual greeting options
  final Map<String, List<String>> _contextualGreetings = {
    'morning': [
      "Ready for a new adventure today?",
      "Got any exciting plans this morning?",
      "Did you sleep well? Ready to explore?",
      "Let's make today amazing!",
      "The morning is perfect for planning adventures!",
    ],
    'afternoon': [
      "How's your day going so far?",
      "Found any cool places today?",
      "Afternoon is perfect for new discoveries!",
      "Need some travel inspiration?",
      "The day is young! Where to next?",
    ],
    'evening': [
      "Had a good day exploring?",
      "Looking for evening activities?",
      "Time to relax or keep exploring?",
      "Let's find something fun tonight!",
      "Any exciting plans for tomorrow?",
    ],
  };
  
  // Mock previous mood - in a real app, this would come from storage/database
  final String _previousMood = "Adventurous";
  final String _lastTravelDestination = "Barcelona";
  
  // Mock user interaction history (in a real app, this would be stored in a database)
  final Map<String, dynamic> _userPreferences = {
    'favoriteType': 'beach',
    'lastSearched': 'museums in Paris',
    'recommendationCount': 3,
    'hasViewedItinerary': true,
  };
  
  // Time tracking for background
  late TimeOfDay _currentTimeOfDay;
  
  @override
  void initState() {
    super.initState();
    _updateGreeting();
    _updateTimeOfDay();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _showRandomMoodyFeature();
  }
  
  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }
  
  void _showRandomMoodyFeature() {
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        setState(() {
          _currentMoodyFeature = MoodyFeature.moodTracking;
        });
      }
    });
  }
  
  void _updateGreeting() {
    final hour = DateTime.now().hour;
    String timeKey = 'afternoon';
    String timeGreeting = "";
    
    if (hour < 12) {
      timeGreeting = "Good morning";
      timeKey = 'morning';
    } else if (hour < 17) {
      timeGreeting = "Good afternoon";
      timeKey = 'afternoon';
    } else {
      timeGreeting = "Good evening";
      timeKey = 'evening';
    }
    
    // Get user name from userData
    final userData = ref.read(userDataProvider);
    final userName = userData.when(
      data: (data) => data != null && data.containsKey('name') && data['name'] != null 
          ? data['name'] 
          : 'Friend',
      loading: () => 'Friend',
      error: (_, __) => 'Friend',
    );
    
    setState(() {
      // Personalized greeting based on user history and time of day
      final random = DateTime.now().millisecond % 5;
      
      switch (random) {
        case 0:
          _greeting = "$timeGreeting, $userName! ✨\n\nYou felt $_previousMood yesterday. Want to try similar activities today?";
          break;
        case 1:
          _greeting = "Hey $userName! $timeGreeting! 🌈\n\nRemember your trip to $_lastTravelDestination? Ready for new adventures?";
          break;
        case 2:
          final contextualGreetings = _contextualGreetings[timeKey] ?? _contextualGreetings['afternoon']!;
          final randomIndex = DateTime.now().microsecond % contextualGreetings.length;
          _greeting = "$timeGreeting, $userName! ✨\n\n${contextualGreetings[randomIndex]}";
          break;
        case 3:
          _greeting = "Welcome back, $userName! $timeGreeting! 🌊\n\nI noticed you like ${_userPreferences['favoriteType']} destinations. Want to explore more?";
          break;
        case 4:
          _greeting = "$timeGreeting, $userName! 🎯\n\nI've created ${_userPreferences['recommendationCount']} personalized travel recommendations for you!";
          break;
      }
    });
  }
  
  void _toggleMoodSelector() {
    setState(() {
      _showMoodSelector = !_showMoodSelector;
      _isMoodSelectorVisible = _showMoodSelector;
      if (_showMoodSelector) {
        _animationController.forward();
      } else {
        _animationController.reverse();
      }
    });
  }

  void _updateTimeOfDay() {
    final hour = DateTime.now().hour;
    if (hour >= 5 && hour < 12) {
      _currentTimeOfDay = TimeOfDay.morning;
    } else if (hour >= 12 && hour < 18) {
      _currentTimeOfDay = TimeOfDay.afternoon;
    } else {
      _currentTimeOfDay = TimeOfDay.evening;
    }
  }
  
  @override
  Widget build(BuildContext context) {
    final locationAsync = ref.watch(locationNotifierProvider);
    final userData = ref.watch(userDataProvider);
    final weatherAsync = ref.watch(weatherProvider);
    
    // Fetch location if not already available
    if (locationAsync is AsyncData && locationAsync.value == null) {
      Future.microtask(() {
        ref.read(locationNotifierProvider.notifier).getCurrentLocation();
      });
    }

    return DynamicTravelBackground(
      timeOfDay: _currentTimeOfDay,
      child: Scaffold(
        backgroundColor: Colors.transparent,
        body: SafeArea(
          child: Stack(
            children: [
              // Main content
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    // Top bar with profile, location and weather
                    _buildTopBar(locationAsync, userData, weatherAsync),
                    
                    // Moody character centered - with new positioning
                    Expanded(
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          // Speech bubble on the left side (with more vibrant color)
                          Positioned(
                            top: 60,
                            left: 30,
                            width: MediaQuery.of(context).size.width * 0.75,
                            child: _buildSpeechBubble(
                              _greeting,
                              onTap: null,
                            ).animate().fadeIn(duration: 1000.ms),
                          ),
                          
                          // Moody character positioned on the right - moved down
                          Positioned(
                            top: 200,
                            right: 30,
                            child: Container(
          decoration: BoxDecoration(
                                shape: BoxShape.circle,
                                gradient: RadialGradient(
                                  center: Alignment.center,
                                  radius: 0.8,
                                  colors: [
                                    const Color(0xFFB3E5FC).withOpacity(0.6),  // Light blue center
                                    const Color(0xFFE3F2FD).withOpacity(0.3),  // Very light blue
                                    const Color(0xFFE3F2FD).withOpacity(0.0),  // Transparent outer
                                  ],
                                  stops: const [0.0, 0.5, 1.0],
                                ),
            boxShadow: [
                                  // Soft outer glow
                                  BoxShadow(
                                    color: const Color(0xFFB3E5FC).withOpacity(0.3),
                                    blurRadius: 30,
                                    spreadRadius: 10,
                                  ),
                                  // Inner shadow for depth
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                                    blurRadius: 15,
                                    spreadRadius: 1,
                                    offset: const Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: ClipOval(
                                child: Material(
                                  color: Colors.transparent,
                                  child: InkWell(
                                    splashColor: const Color(0xFF4CAF50).withOpacity(0.2),
                                    highlightColor: Colors.transparent,
                                    customBorder: const CircleBorder(),
                                    onTap: () {
                                      setState(() {
                                        _currentMoodyFeature = _showMoodSelector 
                                          ? MoodyFeature.none 
                                          : MoodyFeature.moodTracking;
                                        _updateGreeting();
                                      });
                                      Future.delayed(const Duration(milliseconds: 300), () {
                                        if (mounted) _toggleMoodSelector();
                                      });
                                    },
                                    child: Container(
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        gradient: RadialGradient(
                                          center: Alignment.topLeft,
                                          radius: 1.5,
                                          colors: [
                                            Colors.white.withOpacity(0.95),
                                            Colors.white.withOpacity(0.9),
                                          ],
                                        ),
                                      ),
                                      child: MoodyCharacter(
                                        size: 150,
                                        mood: 'default',
                                        currentFeature: _currentMoodyFeature,
                                        mouthScaleFactor: _showMoodSelector ? 1.2 : 1.0,
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ).animate(
                            onPlay: (controller) => controller.repeat(),
                          ).scale(
                            begin: const Offset(1, 1),
                            end: const Offset(1.05, 1.05),
                            duration: const Duration(milliseconds: 2000),
                            curve: Curves.easeInOut,
                          ),
                          
                          // Achievement badges section (below Moody)
                          Positioned(
                            top: 380,
                            left: 20,
                            right: 20,
                            child: AnimatedOpacity(
                              opacity: _showMoodSelector ? 0.0 : 1.0,
                              duration: const Duration(milliseconds: 300),
                              child: _buildAchievementBadges(),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              
              // Mood selector slide-up panel
              AnimatedPositioned(
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
                bottom: _showMoodSelector ? 0 : -320,
                left: 0,
                right: 0,
                height: 320,
                child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(24),
                      topRight: Radius.circular(24),
                    ),
            boxShadow: [
              BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                blurRadius: 10,
                        offset: const Offset(0, -2),
              ),
            ],
          ),
                  child: Column(
                    children: [
                      // Handle bar
                      Container(
                        margin: const EdgeInsets.only(top: 12, bottom: 8),
                        width: 40,
                        height: 4,
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.3),
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                      
                      // Title with more vibrant color
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
              child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                            Text(
                              'Select your mood',
                              style: GoogleFonts.museoModerno(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: const Color(0xFF388E3C),
                              ),
                            ),
                            IconButton(
                              icon: const Icon(Icons.close, color: Color(0xFF388E3C)),
                              onPressed: _toggleMoodSelector,
                            ),
                ],
              ),
            ),
                      
                      // Divider
                      const Divider(),
                      
                      // Mood selector
                      const Expanded(
                        child: Padding(
                          padding: EdgeInsets.all(8.0),
                          child: MoodSelector(),
                        ),
                      ),
                      
                      // Done button with more vibrant color
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: ElevatedButton(
                          onPressed: _toggleMoodSelector,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF4CAF50),
                            foregroundColor: Colors.white,
                            minimumSize: const Size(double.infinity, 50),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                            elevation: 4, // Added elevation for more pop
                          ),
                          child: Text(
                            'Done',
                            style: GoogleFonts.poppins(
              fontSize: 16,
              fontWeight: FontWeight.w600,
                            ),
                          ),
            ),
          ),
        ],
                  ),
                ),
              ),
            ],
          ),
        ),
        // Floating action button to show mood selector when card is hidden - with more vibrant color
        floatingActionButton: !_showMoodSelector ? FloatingActionButton(
          onPressed: _toggleMoodSelector,
          backgroundColor: const Color(0xFF4CAF50),
          foregroundColor: Colors.white,
          elevation: 6, // Enhanced elevation
          child: const Icon(Icons.mood, color: Colors.white),
        ) : null,
      ),
    );
  }

  Widget _buildTopBar(AsyncValue<String?> locationAsync, AsyncValue<Map<String, dynamic>?> userData, AsyncValue<WeatherData?> weatherAsync) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Profile and location group
          Expanded(
            child: Row(
              children: [
                // Profile picture
                userData.when(
                  data: (data) => CircleAvatar(
                    radius: 24,
                    backgroundColor: const Color(0xFF4CAF50),
                    backgroundImage: data?['avatarUrl'] != null 
                        ? NetworkImage(data!['avatarUrl']) 
                        : null,
                    child: data?['avatarUrl'] == null 
                        ? const Icon(Icons.person, color: Colors.white)
                        : null,
                  ),
                  loading: () => const ShimmerAvatar(),
                  error: (_, __) => const ErrorAvatar(),
                ),

                const SizedBox(width: 8),

                // Location dropdown - auto width
                Expanded(
                  child: GestureDetector(
                    onTap: () => _showLocationDialog(context, ref),
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(Icons.location_on, 
                            color: const Color(0xFF4CAF50).withOpacity(0.8),
                            size: 20,
                          ),
                          const SizedBox(width: 6),
                          Flexible(
                            child: Text(
                              locationAsync.when(
                                data: (location) => location ?? 'Select Location',
                                loading: () => 'Loading...',
                                error: (_, __) => 'Location unavailable',
                              ),
                              style: GoogleFonts.poppins(
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                                color: const Color(0xFF2E7D32),
                              ),
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Icon(Icons.arrow_drop_down, 
                            color: const Color(0xFF4CAF50).withOpacity(0.8),
                            size: 20,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(width: 8),

          // Weather button
          weatherAsync.when(
            data: (weather) => weather != null ? InkWell(
              onTap: () => _showWeatherDetails(context, weather),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.wb_sunny, 
                    color: const Color(0xFFFFA000).withOpacity(0.8),
                    size: 18,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    '${weather.temperature.round()}°',
                    style: GoogleFonts.poppins(
                      fontSize: 15,
                      fontWeight: FontWeight.w600,
                      color: const Color(0xFFFF8F00),
                    ),
                  ),
                ],
              ),
            ) : const SizedBox(),
            loading: () => const ShimmerWeather(),
            error: (_, __) => const ErrorWeather(),
          ),
        ],
      ),
    );
  }

  Widget _buildSpeechBubble(String message, {VoidCallback? onTap}) {
    return GestureDetector(
      onTap: onTap,
      child: Stack(
        clipBehavior: Clip.none,
        children: [
          // Soft glow effect behind the bubble
          Positioned(
            left: -8,
            top: -8,
            right: -8,
            bottom: -8,
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFF4CAF50).withOpacity(0.15),
                    blurRadius: 20,
                    spreadRadius: 5,
                  ),
                ],
              ),
            ),
          ),
          
          // Main bubble container with glassy styling
          ClipRRect(
            borderRadius: const BorderRadius.only(
              topLeft: Radius.circular(24),
              topRight: Radius.circular(24),
              bottomRight: Radius.circular(24),
              bottomLeft: Radius.circular(4),
            ),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 22, vertical: 16),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      const Color(0xFF4CAF50).withOpacity(0.15),
                      const Color(0xFF81C784).withOpacity(0.1),
                    ],
                  ),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(24),
                    topRight: Radius.circular(24),
                    bottomRight: Radius.circular(24),
                    bottomLeft: Radius.circular(4),
                  ),
                  border: Border.all(
                    color: const Color(0xFF388E3C).withOpacity(0.3),
                    width: 1.5,
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Message text with dark green color
                    Text(
                      message,
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        color: const Color(0xFF1B5E20),
                        height: 1.4,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    
                    // Time indicator dots with green colors
                    const SizedBox(height: 8),
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      children: List.generate(3, (index) => 
                        Container(
                          width: 6,
                          height: 6,
                          margin: const EdgeInsets.only(right: 4),
                          decoration: BoxDecoration(
                            color: const Color(0xFF4CAF50).withOpacity(0.6 - (index * 0.15)),
                            shape: BoxShape.circle,
                          ),
                        )
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          
          // Chat bubble tail
          Positioned(
            bottom: 15,
            left: -12,
            child: Transform(
              transform: Matrix4.rotationZ(0.8),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(4),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                  child: Container(
                    width: 20,
                    height: 20,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          const Color(0xFF4CAF50).withOpacity(0.15),
                          const Color(0xFF81C784).withOpacity(0.1),
                        ],
                      ),
                      border: Border.all(
                        color: const Color(0xFF388E3C).withOpacity(0.3),
                        width: 1.5,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Location dialog with modern styling
  void _showLocationDialog(BuildContext context, WidgetRef ref) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.6,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
              child: Column(
                children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12, bottom: 8),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.withOpacity(0.3),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            
            // Title
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'Choose Location',
                style: GoogleFonts.museoModerno(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF5BB32A),
                ),
              ),
            ),
            
            // Search box
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: TextField(
                decoration: InputDecoration(
                  hintText: 'Search locations...',
                  prefixIcon: const Icon(Icons.search, color: Color(0xFF5BB32A)),
                  filled: true,
                  fillColor: Colors.grey.withOpacity(0.1),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(16),
                    borderSide: BorderSide.none,
                  ),
                  contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                ),
              ),
            ),
            
            // Current location button
            InkWell(
              onTap: () {
                ref.read(locationNotifierProvider.notifier).getCurrentLocation();
                Navigator.pop(context);
              },
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 16.0),
                decoration: BoxDecoration(
                  color: const Color(0xFF5BB32A).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.my_location, color: Color(0xFF5BB32A)),
                    const SizedBox(width: 12),
          Text(
                      'Use my current location',
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: const Color(0xFF5BB32A),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            // Divider with label
                  Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
              child: Row(
                children: [
                  const Expanded(child: Divider()),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 12.0),
                    child: Text(
                      'Popular Cities',
                      style: GoogleFonts.poppins(
                        fontSize: 12,
                        color: Colors.grey,
                      ),
                    ),
                  ),
                  const Expanded(child: Divider()),
                ],
              ),
            ),
            
            // Popular cities list
            Expanded(
              child: ListView(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                children: [
                  _buildCityItem('San Francisco', Icons.location_city, ref),
                  _buildCityItem('New York', Icons.location_city, ref),
                  _buildCityItem('Tokyo', Icons.location_city, ref),
                  _buildCityItem('London', Icons.location_city, ref),
                  _buildCityItem('Paris', Icons.location_city, ref),
                  _buildCityItem('Rome', Icons.location_city, ref),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildCityItem(String cityName, IconData icon, WidgetRef ref) {
    return InkWell(
      onTap: () {
        ref.read(locationNotifierProvider.notifier).setLocation(cityName);
        Navigator.pop(context);
      },
      child: Container(
        margin: const EdgeInsets.only(bottom: 8.0),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
        decoration: BoxDecoration(
          color: Colors.grey.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          children: [
            Icon(icon, color: Colors.grey[700]),
            const SizedBox(width: 12),
          Text(
              cityName,
              style: GoogleFonts.poppins(
              fontSize: 16,
                fontWeight: FontWeight.w500,
            ),
          ),
        ],
        ),
      ),
    );
  }
  
  // Weather details dialog with modern styling
  void _showWeatherDetails(BuildContext context, WeatherData weather) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
        child: Column(
          children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12, bottom: 8),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.withOpacity(0.3),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            
            // Location and date
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
      children: [
        Text(
                    weather.location,
                    style: GoogleFonts.museoModerno(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF5BB32A),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Today, ${DateTime.now().day} ${_getMonthName(DateTime.now().month)}',
                    style: GoogleFonts.poppins(
            fontSize: 14,
                      color: Colors.grey[700],
                    ),
                  ),
                ],
              ),
            ),
            
            // Current weather
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 16.0),
              padding: const EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: const Color(0xFF5BB32A).withOpacity(0.1),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
        Text(
                        'Now',
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[800],
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${weather.temperature.round()}',
                            style: GoogleFonts.poppins(
                              fontSize: 48,
                              fontWeight: FontWeight.bold,
                              color: Colors.grey[900],
                            ),
                          ),
                          Text(
                            '°C',
                            style: GoogleFonts.poppins(
                              fontSize: 24,
                              color: Colors.grey[700],
                            ),
                          ),
                        ],
                      ),
                      Text(
                        weather.condition,
                        style: GoogleFonts.poppins(
                          fontSize: 16,
                          color: Colors.grey[800],
                        ),
                      ),
                    ],
                  ),
                  Image.network(
                    weather.iconUrl,
                    width: 100,
                    height: 100,
                    errorBuilder: (context, error, stackTrace) {
                      return Icon(
                        Icons.wb_sunny,
                        color: Colors.amber[700],
                        size: 80,
                      );
                    },
                  ),
                ],
              ),
            ),
            
            // Weather details
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  _buildWeatherDetailCard(
                    'Feels Like',
                    '${weather.details['feelsLike']}°',
                    Icons.thermostat,
                  ),
                  _buildWeatherDetailCard(
                    'Humidity',
                    '${weather.details['humidity']}%',
                    Icons.water_drop,
                  ),
                  _buildWeatherDetailCard(
                    'Wind',
                    '${weather.details['windSpeed']} km/h',
                    Icons.air,
                  ),
                ],
              ),
            ),
            
            // Hourly forecast title
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  'Hourly forecast',
                  style: GoogleFonts.poppins(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.grey[900],
                  ),
                ),
              ),
            ),
            
            // Hourly forecast (fake data)
            SizedBox(
              height: 150,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                itemCount: 24,
                itemBuilder: (context, index) {
                  final hour = (DateTime.now().hour + index) % 24;
                  final temp = weather.temperature.round() - (index % 3);
                  final isNow = index == 0;
                  final isNight = hour > 18 || hour < 6;
                  
                  return Container(
                    margin: const EdgeInsets.only(right: 16.0),
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                    decoration: BoxDecoration(
                      color: isNow ? const Color(0xFF5BB32A).withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                      border: isNow ? Border.all(
                        color: const Color(0xFF5BB32A),
                        width: 1.5,
                      ) : null,
                    ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
                        Text(
                          isNow ? 'Now' : '$hour:00',
                          style: GoogleFonts.poppins(
            fontSize: 14,
                            fontWeight: isNow ? FontWeight.bold : FontWeight.normal,
                          ),
                        ),
                        const SizedBox(height: 12),
            Icon(
                          isNight ? Icons.nightlight_round : Icons.wb_sunny,
                          color: isNight ? Colors.indigo : Colors.amber,
              size: 24,
            ),
                        const SizedBox(height: 12),
                        Text(
                          '$temp°',
                          style: GoogleFonts.poppins(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
            
            // 3-day forecast title
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  '3-day forecast',
                  style: GoogleFonts.poppins(
                    fontSize: 18,
            fontWeight: FontWeight.w600,
                    color: Colors.grey[900],
                  ),
                ),
              ),
            ),
            
            // 3-day forecast (fake data)
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                itemCount: 3,
                itemBuilder: (context, index) {
                  final day = DateTime.now().add(Duration(days: index));
                  final dayName = index == 0 ? 'Today' : _getDayName(day.weekday);
                  final highTemp = weather.temperature.round() + (index % 2);
                  final lowTemp = weather.temperature.round() - (2 + index);
                  
                  return Container(
                    margin: const EdgeInsets.only(bottom: 8.0),
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                    decoration: BoxDecoration(
                      color: index == 0 ? const Color(0xFF5BB32A).withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          dayName,
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        Row(
                          children: [
                            Icon(
                              index == 2 ? Icons.cloud : Icons.wb_sunny,
                              color: index == 2 ? Colors.grey : Colors.amber,
                              size: 24,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              '$highTemp° / $lowTemp°',
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
          ),
        ),
      ],
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildWeatherDetailCard(String label, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
      decoration: BoxDecoration(
        color: Colors.grey.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
      children: [
          Icon(icon, color: const Color(0xFF5BB32A)),
          const SizedBox(height: 8),
          Text(
            value,
            style: GoogleFonts.poppins(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
        Text(
              label,
            style: GoogleFonts.poppins(
                fontSize: 12,
              color: Colors.grey[600],
          ),
        ),
      ],
      ),
    );
  }
  
  String _getMonthName(int month) {
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[month - 1];
  }
  
  String _getDayName(int weekday) {
    const days = [
      'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
    ];
    return days[weekday - 1];
  }

  // Achievement badges widget
  Widget _buildAchievementBadges() {
    return Container(
      padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFFFED5D5),  // Soft peach
            Color(0xFFFFE4E1),  // Misty rose
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          // Outer glow
          BoxShadow(
            color: const Color(0xFFFED5D5).withOpacity(0.4),
            blurRadius: 20,
            spreadRadius: 5,
            offset: const Offset(0, 2),
          ),
          // Soft shadow for depth
          BoxShadow(
            color: Colors.black.withOpacity(0.15),
            blurRadius: 30,
            spreadRadius: -5,
            offset: const Offset(0, 15),
          ),
          // Inner highlight
          BoxShadow(
            color: Colors.white.withOpacity(0.5),
            blurRadius: 15,
            spreadRadius: -2,
            offset: const Offset(0, -4),
          ),
        ],
          border: Border.all(
          color: Colors.white.withOpacity(0.8),
          width: 1.5,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Text(
                "Achievements",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF8B4513),  // Warm brown text
                  shadows: [
                    Shadow(
                      color: Colors.black12,
                      offset: Offset(1, 1),
                      blurRadius: 2,
                    ),
                  ],
                ),
              ),
              const Spacer(),
              Container(
                padding: const EdgeInsets.all(4),
                decoration: BoxDecoration(
                  color: const Color(0xFF8B4513).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.emoji_events,
                  color: Color(0xFF8B4513),
                  size: 20,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          
          // Streak counter with softer rainbow gradient
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFFFFDAB9),  // Peach
                  Color(0xFFFFE4B5),  // Moccasin
                  Color(0xFFF0E68C),  // Khaki
                  Color(0xFFE8F5E9),  // Mint green
                ],
              ),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.white.withOpacity(0.7), width: 2),
              boxShadow: [
                  BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                    blurRadius: 8,
                  spreadRadius: 1,
                  ),
              ],
        ),
            child: Row(
          children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.5),
                    shape: BoxShape.circle,
                    border: Border.all(color: Colors.white, width: 2),
                  ),
                  child: const Icon(
                    Icons.local_fire_department_rounded,
                    color: Color(0xFFE67E22),  // Soft orange
                    size: 24,
                  ),
                ),
                const SizedBox(width: 12),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                    const Text(
                      "5-Day Streak!",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF8B4513),  // Warm brown
                        shadows: [
                          Shadow(
                            color: Colors.black12,
                            offset: Offset(1, 1),
                            blurRadius: 2,
                          ),
                        ],
                      ),
                    ),
                  Text(
                      "Keep tracking your mood daily",
            style: TextStyle(
                        fontSize: 14,
                        color: const Color(0xFF8B4513).withOpacity(0.7),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Badge grid with pastel rainbow colors
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildBadge("assets/icons/badge_mood.png", "Mood\nTracker", true, const Color(0xFFFFB6C1)),  // Light pink
              _buildBadge("assets/icons/badge_explore.png", "Explorer", true, const Color(0xFFFFDAB9)),    // Peach
              _buildBadge("assets/icons/badge_weather.png", "Weather\nWatcher", false, const Color(0xFFB2DFDB)), // Mint
              _buildBadge("assets/icons/badge_social.png", "Social\nButterfly", false, const Color(0xFFB3E5FC)), // Light blue
            ],
          ),
          
          const SizedBox(height: 12),
          
          // Progress toward next achievement with pastel rainbow gradient
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Padding(
                padding: EdgeInsets.only(left: 4, bottom: 4),
                    child: Text(
                  "Next Achievement: 7-Day Streak",
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                    color: Color(0xFF8B4513),  // Warm brown
                  ),
                ),
              ),
              Stack(
                children: [
                  // Background
                  Container(
                    height: 10,
                    decoration: BoxDecoration(
                      color: const Color(0xFF8B4513).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(5),
                    ),
                  ),
                  // Progress with pastel rainbow gradient
                  Container(
                    height: 10,
                    width: MediaQuery.of(context).size.width * 0.5,
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [
                          Color(0xFFFFB6C1),  // Light pink
                          Color(0xFFFFDAB9),  // Peach
                          Color(0xFFF0E68C),  // Khaki
                          Color(0xFFB2DFDB),  // Mint
                        ],
                      ),
                      borderRadius: BorderRadius.circular(5),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.white.withOpacity(0.5),
                          blurRadius: 4,
                          spreadRadius: 1,
            ),
          ],
        ),
                  ),
                ],
              ),
              Padding(
                padding: const EdgeInsets.only(top: 4, left: 4),
                child: Text(
                  "5/7 days completed",
                  style: TextStyle(
                    fontSize: 12,
                    color: const Color(0xFF8B4513).withOpacity(0.7),  // Warm brown with opacity
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  
  Widget _buildBadge(String iconPath, String label, bool isUnlocked, Color baseColor) {
    return Column(
          children: [
        Container(
          width: 60,
          height: 60,
          decoration: BoxDecoration(
            gradient: isUnlocked
              ? LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    baseColor,
                    baseColor.withOpacity(0.7),
                  ],
                )
              : null,
            color: isUnlocked ? null : const Color(0xFF8B4513).withOpacity(0.1),
            shape: BoxShape.circle,
            border: Border.all(
              color: isUnlocked ? Colors.white : const Color(0xFF8B4513).withOpacity(0.2),
              width: 2,
            ),
            boxShadow: isUnlocked
              ? [
                  BoxShadow(
                    color: baseColor.withOpacity(0.3),
                    blurRadius: 8,
                    spreadRadius: 1,
                  )
                ]
              : null,
          ),
          child: Center(
            child: Icon(
              isUnlocked ? Icons.emoji_events : Icons.lock_outline,
              color: isUnlocked ? const Color(0xFF8B4513) : const Color(0xFF8B4513).withOpacity(0.4),
              size: 32,
            ),
          ),
        ),
        const SizedBox(height: 6),
            Text(
              label,
          textAlign: TextAlign.center,
          style: TextStyle(
                fontSize: 12,
            fontWeight: FontWeight.w500,
            color: const Color(0xFF8B4513).withOpacity(isUnlocked ? 0.9 : 0.5),
              ),
            ),
          ],
    );
  }

  Widget _buildWeatherDetail({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Column(
      children: [
        Icon(icon, size: 24, color: Colors.grey[600]),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[600],
          ),
        ),
        const SizedBox(height: 2),
        Text(
          value,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}

class HomeTab extends StatefulWidget {
  const HomeTab({super.key});

  @override
  State<HomeTab> createState() => _HomeTabState();
}

class _HomeTabState extends State<HomeTab> {
  bool _isWeatherExpanded = false;
  
  // Add a mock weather data for the HomeTab
  final Map<String, dynamic> _mockWeatherDetails = {
    'feelsLike': 28,
    'humidity': 65,
    'windSpeed': 19
  };

  // First row of mood options
  final List<Map<String, dynamic>> _firstRowMoods = [
    {
      'icon': '🏕️',
      'label': 'Adventurous',
      'color': Colors.blue.shade50,
      'borderColor': Colors.blue.shade200,
    },
    {
      'icon': '🍃',
      'label': 'Relaxed',
      'color': Colors.green.shade50,
      'borderColor': Colors.green.shade200,
    },
    {
      'icon': '💖',
      'label': 'Romantic',
      'color': Colors.pink.shade50,
      'borderColor': Colors.pink.shade200,
    },
    {
      'icon': '⚡',
      'label': 'Energetic',
      'color': Colors.yellow.shade50,
      'borderColor': Colors.yellow.shade200,
    },
    {
      'icon': '🤩',
      'label': 'Excited',
      'color': Colors.purple.shade50,
      'borderColor': Colors.purple.shade200,
    },
    {
      'icon': '☕',
      'label': 'Cozy',
      'color': Colors.brown.shade50,
      'borderColor': Colors.brown.shade200,
    },
  ];

  final List<Map<String, dynamic>> _secondRowMoods = [
    {
      'icon': '😲',
      'label': 'Surprise',
      'color': Colors.orange.shade50,
      'borderColor': Colors.orange.shade200,
    },
    {
      'icon': '🍽️',
      'label': 'Foody',
      'color': Colors.red.shade50,
      'borderColor': Colors.red.shade200,
    },
    {
      'icon': '🎉',
      'label': 'Festive',
      'color': Colors.indigo.shade50,
      'borderColor': Colors.indigo.shade200,
    },
    {
      'icon': '🧠',
      'label': 'Mind',
      'color': Colors.teal.shade50,
      'borderColor': Colors.teal.shade200,
    },
    {
      'icon': '👨‍👩‍👧‍👦',
      'label': 'Family fun',
      'color': Colors.deepPurple.shade50,
      'borderColor': Colors.deepPurple.shade200,
    },
    {
      'icon': '🌍',
      'label': 'Cultural',
      'color': Colors.cyan.shade50,
      'borderColor': Colors.cyan.shade200,
    },
  ];

  Set<String> _selectedMoods = {};

  void _handleMoodSelect(String mood) {
    setState(() {
      if (_selectedMoods.contains(mood)) {
        _selectedMoods.remove(mood);
      } else if (_selectedMoods.length < 3) {
          _selectedMoods.add(mood);
      }
    });
    
    // If this method updates any providers, wrap it in WidgetsBinding
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        // Provider updates should go here, outside of setState
        // Example: ref.read(preferencesProvider.notifier).updateSelectedMoods(_selectedMoods.toList());
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
            const SizedBox(height: 12),
            
            // Header with profile and weather
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    CircleAvatar(
                      radius: 20,
                      backgroundColor: Colors.green,
                      child: Icon(Icons.person, color: Colors.white),
                    ),
                    const SizedBox(width: 4),
          Text(
                          'Washington DC',
            style: TextStyle(
                            fontSize: 11,
                            color: Colors.grey[800],
                          ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.7),
                        borderRadius: BorderRadius.circular(12),
                      ),
      child: Row(
        children: [
                          const Icon(Icons.wb_sunny, color: Colors.amber, size: 12),
                          const SizedBox(width: 2),
          Text(
                            '32°',
            style: TextStyle(
                              fontSize: 11,
              fontWeight: FontWeight.bold,
                              color: Colors.grey[800],
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 6),
                    const Icon(Icons.notifications_none, color: Colors.green, size: 18),
                  ],
                ),
              ],
          ).animate().fadeIn(duration: 400.ms),
          
          const SizedBox(height: 16),
          
            // Greeting
            Text(
              'Hello, John!',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ).animate().fadeIn(delay: 200.ms, duration: 400.ms),
          
          const SizedBox(height: 16),
          
            // Weather widget
            GestureDetector(
              onTap: () {
        setState(() {
                  _isWeatherExpanded = !_isWeatherExpanded;
                });
              },
        child: Container(
          padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Sunny for the rest of the day. Wind speeds up to 19 km/h.',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[800],
                          ),
                        ),
                        AnimatedRotation(
                          duration: const Duration(milliseconds: 200),
                          turns: _isWeatherExpanded ? 0.5 : 0,
                          child: Icon(Icons.keyboard_arrow_down, color: Colors.grey[600]),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: Row(
                        children: List.generate(7, (index) {
                          final hour = (DateTime.now().hour + index) % 24;
                          final temp = 29 - index;
                          final isNight = hour < 6 || hour > 18;
                          
                          return Container(
                            margin: const EdgeInsets.only(right: 24),
                            child: Column(
                              children: [
                                Text(
                                  index == 0 ? 'Now' : '$hour:00',
                                  style: const TextStyle(fontSize: 14),
                                ),
                                const SizedBox(height: 8),
                                Icon(
                                  isNight ? Icons.nightlight_round : Icons.wb_sunny,
                                  color: isNight ? Colors.blueGrey : Colors.amber,
                                  size: 24,
                                ),
                                const SizedBox(height: 8),
                    Text(
                                  '$temp°',
                style: const TextStyle(
                                    fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
        ],
      ),
    );
                        }),
                      ),
                    ),
                    if (_isWeatherExpanded) ...[
                      const SizedBox(height: 16),
                      const Divider(height: 1, color: Colors.black12),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          _buildWeatherDetail(
                            icon: Icons.thermostat,
                            label: 'Feels Like',
                            value: '${_mockWeatherDetails['feelsLike']}°',
                          ),
                          _buildWeatherDetail(
                            icon: Icons.water_drop,
                            label: 'Humidity',
                            value: '${_mockWeatherDetails['humidity']}%',
                          ),
                          _buildWeatherDetail(
                            icon: Icons.air,
                            label: 'Wind',
                            value: '${_mockWeatherDetails['windSpeed']} km/h',
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          _buildWeatherDetail(
                            icon: Icons.wb_sunny,
                            label: 'Sunrise',
                            value: '6:24 AM',
                          ),
                          _buildWeatherDetail(
                            icon: Icons.nightlight,
                            label: 'Sunset',
                            value: '8:16 PM',
                          ),
                          _buildWeatherDetail(
                            icon: Icons.visibility,
                            label: 'Visibility',
                            value: '16.1 km',
                          ),
                        ],
                      ),
                    ],
                  ],
                ),
              ),
            ).animate().fadeIn(delay: 400.ms, duration: 400.ms),

            const SizedBox(height: 32),

            // Mood selection title
            Text(
              'How are you feeling today?',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ).animate().fadeIn(delay: 600.ms, duration: 400.ms),

            const SizedBox(height: 24),

            // First row of moods
            SizedBox(
              height: 100,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                physics: const BouncingScrollPhysics(),
                padding: const EdgeInsets.symmetric(horizontal: 16),
                itemCount: _firstRowMoods.length,
                itemBuilder: (context, index) {
                  final mood = _firstRowMoods[index];
                  final isSelected = _selectedMoods.contains(mood['label']);
                  return Container(
                    width: 80,
                    margin: const EdgeInsets.only(right: 12),
                    decoration: BoxDecoration(
                      color: isSelected 
                        ? (mood['color'] as Color).withOpacity(0.7)
                        : mood['color'] as Color,
        borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: isSelected 
                          ? mood['borderColor'] as Color
                          : (mood['borderColor'] as Color).withOpacity(0.3),
                        width: isSelected ? 2 : 1,
                      ),
                      boxShadow: isSelected
                        ? [
                            BoxShadow(
                              color: (mood['color'] as Color).withOpacity(0.5),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            )
                          ]
                        : [],
                    ),
                    child: Stack(
                      children: [
                        if (isSelected)
                          Positioned(
                            top: 8,
                            right: 8,
        child: Container(
                              padding: const EdgeInsets.all(2),
          decoration: BoxDecoration(
                                color: mood['borderColor'] as Color,
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(
                                Icons.check,
            color: Colors.white,
                                size: 12,
              ),
            ),
          ),
                        Column(
                          mainAxisAlignment: MainAxisAlignment.center,
            children: [
                            Text(
                              mood['icon'],
                              style: const TextStyle(fontSize: 32),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              mood['label'],
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: isSelected ? FontWeight.bold : FontWeight.w500,
                                color: isSelected 
                                  ? mood['borderColor'] as Color
                                  : Colors.grey[800],
                              ),
                              textAlign: TextAlign.center,
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ],
                        ),
                      ],
                    ),
                  ).animate(
                    onPlay: (controller) => controller.repeat(),
                  ).shimmer(
                    duration: const Duration(seconds: 2),
                    color: isSelected ? Colors.white.withOpacity(0.3) : Colors.transparent,
                  );
                },
              ),
            ).animate().fadeIn(delay: 800.ms, duration: 400.ms),

            const SizedBox(height: 16),

            // Second row of moods
            SizedBox(
              height: 100,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                physics: const BouncingScrollPhysics(),
                padding: const EdgeInsets.symmetric(horizontal: 16),
                itemCount: _secondRowMoods.length,
                itemBuilder: (context, index) {
                  final mood = _secondRowMoods[index];
                  final isSelected = _selectedMoods.contains(mood['label']);
                  return Container(
                    width: 80,
                    margin: const EdgeInsets.only(right: 12),
                decoration: BoxDecoration(
                      color: isSelected 
                        ? (mood['color'] as Color).withOpacity(0.7)
                        : mood['color'] as Color,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: isSelected 
                          ? mood['borderColor'] as Color
                          : (mood['borderColor'] as Color).withOpacity(0.3),
                        width: isSelected ? 2 : 1,
                      ),
                      boxShadow: isSelected
                        ? [
                            BoxShadow(
                              color: (mood['color'] as Color).withOpacity(0.5),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            )
                          ]
                        : [],
                    ),
                    child: Stack(
                      children: [
                        if (isSelected)
                          Positioned(
                            top: 8,
                            right: 8,
                            child: Container(
                              padding: const EdgeInsets.all(2),
                              decoration: BoxDecoration(
                                color: mood['borderColor'] as Color,
                  shape: BoxShape.circle,
                ),
                              child: const Icon(
                                Icons.check,
                                color: Colors.white,
                                size: 12,
                              ),
                            ),
                          ),
                        Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                              mood['icon'],
                              style: const TextStyle(fontSize: 32),
                    ),
                    const SizedBox(height: 4),
                    Text(
                              mood['label'],
                style: TextStyle(
                                fontSize: 12,
                                fontWeight: isSelected ? FontWeight.bold : FontWeight.w500,
                                color: isSelected 
                                  ? mood['borderColor'] as Color
                                  : Colors.grey[800],
                              ),
                              textAlign: TextAlign.center,
                              maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
                      ],
                    ),
                  ).animate(
                    onPlay: (controller) => controller.repeat(),
                  ).shimmer(
                    duration: const Duration(seconds: 2),
                    color: isSelected ? Colors.white.withOpacity(0.3) : Colors.transparent,
                  );
                },
              ),
            ).animate().fadeIn(delay: 1000.ms, duration: 400.ms),

            const SizedBox(height: 24),
            ],
          ),
      ),
    );
  }
}

class DynamicTravelBackground extends StatelessWidget {
  final Widget child;
  final TimeOfDay timeOfDay;

  const DynamicTravelBackground({
    Key? key,
    required this.child,
    required this.timeOfDay,
  }) : super(key: key);
  
  List<Color> _getGradientColors() {
    return const [
      Color(0xFFFFFDF5),  // Lighter warm cream yellow
      Color(0xFFFFF9E8),  // Lighter warm yellow
    ];
  }

  @override
  Widget build(BuildContext context) {
    final gradientColors = _getGradientColors();

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: gradientColors,
        ),
      ),
      child: child,
    );
  }
}

class ShimmerAvatar extends StatelessWidget {
  const ShimmerAvatar({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 48,
      height: 48,
                          decoration: BoxDecoration(
        color: Colors.grey[300],
        shape: BoxShape.circle,
      ),
    ).animate(onPlay: (controller) => controller.repeat())
      .shimmer(duration: 1500.ms, color: Colors.white.withOpacity(0.2));
  }
}

class ErrorAvatar extends StatelessWidget {
  const ErrorAvatar({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 48,
      height: 48,
      decoration: const BoxDecoration(
        color: Color(0xFFFFCDD2),
        shape: BoxShape.circle,
      ),
      child: const Icon(Icons.error_outline, color: Color(0xFFD32F2F)),
    );
  }
}

class ShimmerWeather extends StatelessWidget {
  const ShimmerWeather({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 80,
      height: 40,
      decoration: BoxDecoration(
        color: Colors.grey[300],
        borderRadius: BorderRadius.circular(20),
      ),
    ).animate(onPlay: (controller) => controller.repeat())
      .shimmer(duration: 1500.ms, color: Colors.white.withOpacity(0.2));
  }
}

class ErrorWeather extends ConsumerWidget {
  const ErrorWeather({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: const Color(0xFFFFCDD2).withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: const Color(0xFFD32F2F).withOpacity(0.3),
          width: 1.5,
        ),
      ),
      child: IconButton(
        icon: const Icon(Icons.refresh, color: Color(0xFFD32F2F), size: 20),
        onPressed: () => ref.refresh(weatherProvider),
      ),
    );
  }
} 