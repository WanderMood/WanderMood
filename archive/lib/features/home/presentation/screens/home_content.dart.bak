import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:ui';
import '../widgets/mood_tile.dart';
import 'package:wandermood/features/weather/presentation/widgets/hourly_weather_widget.dart';
import 'package:wandermood/features/location/presentation/widgets/location_dropdown.dart';
import '../widgets/mood_history_timeline.dart'; // Assuming we'll create this

class HomeContent extends StatefulWidget {
  const HomeContent({Key? key}) : super(key: key);

  @override
  State<HomeContent> createState() => _HomeContentState();
}

class _HomeContentState extends State<HomeContent> with SingleTickerProviderStateMixin {
  final Set<String> _selectedMoods = {};
  static const int maxMoodSelections = 3;
  late AnimationController _moodPulseController;
  String _currentMoodPattern = "No pattern detected yet";
  final ValueNotifier<bool> _showMoodInsights = ValueNotifier<bool>(false);

  @override
  void initState() {
    super.initState();
    _moodPulseController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    )..repeat(reverse: true);
    
    // Simulate loading mood insights after a delay
    Future.delayed(const Duration(seconds: 2), () {
      _showMoodInsights.value = true;
    });
  }

  @override
  void dispose() {
    _moodPulseController.dispose();
    _showMoodInsights.dispose();
    super.dispose();
  }

  void _toggleMoodSelection(String mood) {
    setState(() {
      if (_selectedMoods.contains(mood)) {
        _selectedMoods.remove(mood);
      } else if (_selectedMoods.length < maxMoodSelections) {
        _selectedMoods.add(mood);
        
        // Update "AI insight" based on mood selection
        if (mood == 'Adventurous') {
          _currentMoodPattern = "You often feel adventurous in the evenings";
        } else if (mood == 'Relaxed') {
          _currentMoodPattern = "Your relaxed moments often lead to travel plans";
        } else if (mood == 'Energetic') {
          _currentMoodPattern = "Your energy peaks when the weather is clear";
        } else {
          _currentMoodPattern = "This mood connects with your weekend patterns";
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final mediaQuery = MediaQuery.of(context);
    final statusBarHeight = mediaQuery.viewPadding.top;
    final theme = Theme.of(context);

    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            Color(0xFFFFAFF4), // Roze
            Color(0xFFFFF5AF), // Lichtgeel
          ],
        ),
      ),
      child: Column(
        children: [
          // Status bar height compensation
          SizedBox(height: statusBarHeight),
          
          // Top section with profile, location and weather
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            child: _buildTopBar(context),
          ),
          
          // Main content area
          Expanded(
            child: CustomScrollView(
              physics: const BouncingScrollPhysics(),
              slivers: [
                // Main content
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 8),
                        
                        // Dynamic greeting
                        _buildGreeting(),
                        
                        const SizedBox(height: 16),
                        
                        // Mood selection title with pulsing animation
                        _buildMoodSelectionTitle(),
                        
                        const SizedBox(height: 16),
                        
                        // Large central mood selection grid
                        _buildEnhancedMoodGrid(),
                        
                        const SizedBox(height: 16),
                        
                        // AI-powered mood insights
                        _buildMoodInsights(),
                        
                        const SizedBox(height: 16),
                        
                        // Mood history timeline
                        _buildMoodHistoryTimeline(),
                        
                        const SizedBox(height: 16),
                        
                        // Weather information (less prominent)
                        _buildWeatherWidget(),

                        const SizedBox(height: 24),
                        
                        // Unlock the Fun button
                        _buildUnlockButton(context),

                        // Extra space for navigation bar
                        SizedBox(height: mediaQuery.padding.bottom + 90),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTopBar(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        // Profile and location
        Row(
          children: [
            _buildProfileButton(),
            const SizedBox(width: 12),
            const LocationDropdown(),
          ],
        ),
        
        // Weather info only
        _buildWeatherInfo(),
      ],
    );
  }

  Widget _buildProfileButton() {
    return GestureDetector(
      onTap: () {
        // Profile interaction to be implemented
      },
      child: Container(
        width: 56,
        height: 56,
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFF12B347), Color(0xFF0F9A3F)],
          ),
          borderRadius: BorderRadius.circular(28),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF12B347).withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(2.0),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(26),
              image: const DecorationImage(
                image: NetworkImage('https://i.pravatar.cc/150?img=12'),
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
      ),
    ).animate()
      .fadeIn(duration: 400.ms)
      .slideX(begin: -0.2, end: 0);
  }

  Widget _buildWeatherInfo() {
    return GestureDetector(
      onTap: () {
        // Weather details to be implemented
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.15),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: Colors.white.withOpacity(0.2),
            width: 1.5,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(20),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 8, sigmaY: 8),
            child: Row(
              children: [
                const Icon(
                  Icons.wb_sunny,
                  color: Color(0xFFF9C21B),
                  size: 24,
                ),
                const SizedBox(width: 6),
                Text(
                  '32Â°',
                  style: GoogleFonts.poppins(
                    color: const Color(0xFF1A4A24),
                    fontSize: 17,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    ).animate()
      .fadeIn(delay: 400.ms, duration: 400.ms)
      .slideX(begin: 0.2, end: 0);
  }

  Widget _buildGreeting() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Text(
        'Hello, John!',
        style: GoogleFonts.openSans(
          fontSize: 28, // Slightly smaller
          fontWeight: FontWeight.w800,
          color: const Color(0xFF12B347),
        ),
      ),
    ).animate().fadeIn(delay: 200.ms, duration: 400.ms);
  }

  Widget _buildMoodSelectionTitle() {
    return Center(
      child: AnimatedBuilder(
        animation: _moodPulseController,
        builder: (context, child) {
          return Container(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 10),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  const Color(0xFF12B347).withOpacity(0.7 + _moodPulseController.value * 0.3),
                  const Color(0xFF0F9A3F).withOpacity(0.7 + _moodPulseController.value * 0.3),
                ],
              ),
              borderRadius: BorderRadius.circular(30),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF12B347).withOpacity(0.2 + _moodPulseController.value * 0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Text(
              'How are you feeling today?',
              style: GoogleFonts.openSans(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          );
        }
      ),
    ).animate().fadeIn(delay: 300.ms, duration: 400.ms);
  }

  Widget _buildEnhancedMoodGrid() {
    // Define mood categories
    final List<Map<String, dynamic>> moods = [
      {'label': 'Adventurous', 'emoji': 'ðï¸', 'color': const Color(0xFFCAE5FC)},
      {'label': 'Relaxed', 'emoji': 'ð§ð¾ââï¸', 'color': const Color(0xFFE7CCEB)},
      {'label': 'Romantic', 'emoji': 'ð', 'color': const Color(0xFFFFD5DC)},
      {'label': 'Energetic', 'emoji': 'â¡', 'color': const Color(0xFFFFEED4)},
      {'label': 'Excited', 'emoji': 'ð¤©', 'color': const Color(0xFFD0EBD1)},
      {'label': 'Cozy', 'emoji': 'â', 'color': const Color(0xFFD2F3F8)},
      {'label': 'Surprise', 'emoji': 'ð²', 'color': const Color(0xFFFFE0B2)},
      {'label': 'Foody', 'emoji': 'ð½ï¸', 'color': const Color(0xFFFFCDD2)},
      {'label': 'Festive', 'emoji': 'ð', 'color': const Color(0xFFE8EAF6)},
      {'label': 'Mind full', 'emoji': 'ð§ ', 'color': const Color(0xFFB2DFDB)},
      {'label': 'Family fun', 'emoji': 'ð¨âð©âð§âð¦', 'color': const Color(0xFFD1C4E9)},
      {'label': 'Cultural', 'emoji': 'ð', 'color': const Color(0xFFB2EBF2)},
    ];

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(20),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),
          child: GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3,
              childAspectRatio: 1,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
            ),
            itemCount: moods.length,
            itemBuilder: (context, index) {
              final mood = moods[index];
              final isEnabled = _selectedMoods.length < maxMoodSelections || 
                            _selectedMoods.contains(mood['label']);
              
              return SizedBox(
                height: 120,
                width: 100,
                child: MoodTile(
                  label: mood['label'] as String,
                  emoji: mood['emoji'] as String,
                  bgColor: mood['color'] as Color,
                  isSelected: _selectedMoods.contains(mood['label']),
                  isSelectionEnabled: isEnabled,
                  onTap: () => _toggleMoodSelection(mood['label']),
                ),
              ).animate().fadeIn(delay: 400.ms + (index * 50).ms, duration: 400.ms);
            },
          ),
        ),
      ),
    );
  }

  Widget _buildMoodInsights() {
    return ValueListenableBuilder<bool>(
      valueListenable: _showMoodInsights,
      builder: (context, showInsights, child) {
        if (!showInsights) {
          return const SizedBox.shrink();
        }
        
        return Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF12B347), Color(0xFF0D8C38)],
            ),
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: const Color(0xFF12B347).withOpacity(0.3),
                blurRadius: 8,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const Icon(
                    Icons.psychology_alt,
                    color: Colors.white,
                    size: 22,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Mood AI Insight',
                    style: GoogleFonts.poppins(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                _currentMoodPattern,
                style: GoogleFonts.poppins(
                  color: Colors.white.withOpacity(0.9),
                  fontSize: 14,
                ),
              ),
            ],
          ),
        ).animate().fadeIn(delay: 300.ms, duration: 500.ms);
      }
    );
  }

  Widget _buildMoodHistoryTimeline() {
    // Sample mood history data with colors
    final List<MoodHistoryEntry> moodHistory = [
      MoodHistoryEntry(
        date: 'Today',
        mood: 'Relaxed',
        emoji: 'ð§ð¾ââï¸',
        color: const Color(0xFFE7CCEB),
      ),
      MoodHistoryEntry(
        date: 'Yesterday',
        mood: 'Adventurous',
        emoji: 'ðï¸',
        color: const Color(0xFFCAE5FC),
      ),
      MoodHistoryEntry(
        date: '2 days ago',
        mood: 'Energetic',
        emoji: 'â¡',
        color: const Color(0xFFFFEED4),
      ),
      MoodHistoryEntry(
        date: '3 days ago',
        mood: 'Romantic',
        emoji: 'ð',
        color: const Color(0xFFFFD5DC),
      ),
      MoodHistoryEntry(
        date: '4 days ago',
        mood: 'Excited',
        emoji: 'ð¤©',
        color: const Color(0xFFD0EBD1),
      ),
    ];

    return MoodHistoryTimeline(entries: moodHistory);
  }

  Widget _buildWeatherWidget() {
    return HourlyWeatherWidget(
      location: 'Washington DC',
      hourlyWeather: List.generate(24, (index) {
        final hour = DateTime.now().add(Duration(hours: index));
        return HourlyWeather(
          time: index == 0 ? 'Now' : '${hour.hour}:00',
          temperature: 25 + (index % 5),
        );
      }),
      windSpeed: '19 km/h',
      uvIndex: 6,
      sunriseTime: '6:24 AM',
      sunsetTime: '7:45 PM',
      aqi: 45,
    );
  }

  Widget _buildUnlockButton(BuildContext context) {
    final bool hasSelectedMoods = _selectedMoods.isNotEmpty;
    
    return Center(
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        height: 56,
        width: hasSelectedMoods ? 200 : 180,
        child: ElevatedButton(
          onPressed: hasSelectedMoods ? () => context.go('/adventure-plan') : null,
          style: ElevatedButton.styleFrom(
            backgroundColor: hasSelectedMoods ? const Color(0xFF12B347) : Colors.grey.shade300,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(30),
            ),
            elevation: hasSelectedMoods ? 4 : 0,
          ).copyWith(
            overlayColor: MaterialStateProperty.all(
              Colors.white.withOpacity(0.1),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Discover Mood Trips',
                style: GoogleFonts.openSans(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 8),
              const Text(
                'â¨',
                style: TextStyle(fontSize: 20),
              ),
            ],
          ),
        ),
      ),
    ).animate(target: hasSelectedMoods ? 1 : 0)
      .fadeIn(duration: 300.ms)
      .scale(begin: const Offset(0.95, 0.95), end: const Offset(1, 1));
  }
} 